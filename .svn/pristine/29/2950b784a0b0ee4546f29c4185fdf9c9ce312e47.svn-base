<template>
  <div class="app-container">
      <!--用户数据-->
        <el-row class="mb8">
          <el-col>
            <span style="margin-right: 5px; font-size: 14px;">机器人名称</span>
            <el-select style="margin-right: 10px" v-model="value" placeholder="请选择" @change="handleNodeClick">
              <el-option
                v-for="item in deptOptions"
                :key="item.id"
                :label="item.bizName"
                :value="item.bizNo"
                >
              </el-option>
            </el-select>
            <el-button
              type="warning"
              plain
              icon="el-icon-download"
              size="mini"
              @click="handleExport"
              v-hasPermi="['system:user:export']"
            >导出</el-button>
          </el-col>
        </el-row>

        <el-table v-loading="loading" :data="userList" @selection-change="handleSelectionChange">
          <el-table-column type="selection" width="50" align="center" />
          <el-table-column label="用户编号" align="center" key="userId" prop="userId" v-if="columns[0].visible" />
          <el-table-column label="用户名称" align="center" key="userName" prop="userName" v-if="columns[1].visible" :show-overflow-tooltip="true" />
          <el-table-column label="用户昵称" align="center" key="nickName" prop="nickName" v-if="columns[2].visible" :show-overflow-tooltip="true" />
          <el-table-column label="部门" align="center" key="deptName" prop="dept.deptName" v-if="columns[3].visible" :show-overflow-tooltip="true" />
          <el-table-column label="手机号码" align="center" key="phonenumber" prop="phonenumber" v-if="columns[4].visible" width="120" />
          <el-table-column label="创建时间" align="center" prop="createTime" v-if="columns[6].visible" width="160">
            <template slot-scope="scope">
              <span>{{ parseTime(scope.row.createTime) }}</span>
            </template>
          </el-table-column>
        </el-table>
      </el-col>
    </el-row>
  </div>
</template>

<script>
import { listExport, getTaskList } from "@/api/outbound/export_2";
import Treeselect from "@riophae/vue-treeselect";
import "@riophae/vue-treeselect/dist/vue-treeselect.css";

export default {
  name: "User",
  dicts: ["sys_normal_disable", "sys_user_sex"],
  components: { Treeselect },
  data() {
    return {
      // 遮罩层
      loading: false,
      // 用户表格数据
      userList: null,
      // 部门树选项
      deptOptions: undefined,
      defaultProps: {
        children: "children",
        label: "label",
      },
      // 列信息
      columns: [
        { key: 0, label: `用户编号`, visible: true },
        { key: 1, label: `用户名称`, visible: true },
        { key: 2, label: `用户昵称`, visible: true },
        { key: 3, label: `部门`, visible: true },
        { key: 4, label: `手机号码`, visible: true },
        { key: 5, label: `状态`, visible: true },
        { key: 6, label: `创建时间`, visible: true },
      ],
      value: "",
    };
  },
  created() {
    this.getTreeselect(); //获取机器人列表
  },
  methods: {
    // 节点单击事件
    handleNodeClick() {
      console.log(this.value);
      this.getList(this.value);
    },
    // 多选框选中数据
    handleSelectionChange(selection) {
      this.ids = selection.map((item) => item.userId);
      this.single = selection.length != 1;
      this.multiple = !selection.length;
    },
    /** 查询任务列表 */
    getList(id) {
      this.loading = true;
      getTaskList(id).then((res) => {
        this.loading = false;
        console.log(res);
      });
    },
    /** 查询机器人列表 */
    getTreeselect() {
      listExport().then((res) => {
        console.log(res);
        this.deptOptions = res.data.map((item) => {
          return {
            bizName: item.bizName,
            bizNo: item.bizNo,
            id: item.id,
          };
        });
        this.value = this.deptOptions[0].bizNo;
        this.getList(this.value);
      });
    },
    /** 导出按钮操作 */
    handleExport() {
      this.download(
        "system/user/export",
        {},
        `user_${new Date().getTime()}.xlsx`
      );
    },
    // 筛选节点
    filterNode(value, data) {
      if (!value) return true;
      return data.label.indexOf(value) !== -1;
    },
  },
};
</script>
